import dotenv from "dotenv";
dotenv.config();

import fs from "fs"; // тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ър╕гр╕гр╕Чр╕▒р╕Фр╕Щр╕╡р╣Й
import { Client, GatewayIntentBits } from "discord.js";
import express from "express";

const client = new Client({ intents: [GatewayIntentBits.Guilds] });
const app = express();
app.use(express.json());

const CONFIG_FILE = "./config.json";
const DEFAULT_URL = "https://roleplayfrom.vercel.app/";

let config = fs.existsSync(CONFIG_FILE)
  ? JSON.parse(fs.readFileSync(CONFIG_FILE, "utf8"))
  : { privateChannel: null };

function saveConfig() {
  fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
}

client.once("ready", async () => {
  console.log(`тЬЕ р╕Ър╕нр╕Чр╕нр╕нр╕Щр╣Др╕ер╕Щр╣Мр╣Бр╕ер╣Йр╕зр╣Гр╕Щр╕Кр╕╖р╣Ир╕н ${client.user.tag}`);
});

// р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕З
const commands = [
  new SlashCommandBuilder()
    .setName("set")
    .setDescription("р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Кр╣Ир╕нр╕Зр╕лр╕гр╕╖р╕нр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б")
    .addSubcommand(sub =>
      sub
        .setName("private-channel")
        .setDescription("р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Кр╣Ир╕нр╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╕╕р╕Ыр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Яр╕нр╕гр╣Мр╕б")
        .addChannelOption(opt =>
          opt.setName("channel").setDescription("р╕Кр╣Ир╕нр╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╕гр╕╕р╕Ы").setRequired(true)
        )
    )
    .addSubcommand(sub =>
      sub
        .setName("message")
        .setDescription("р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ыр╕гр╕░р╕Бр╕▓р╕ир╕Юр╕гр╣Йр╕нр╕бр╕Ыр╕╕р╣Ир╕бр╕Яр╕нр╕гр╣Мр╕б")
        .addChannelOption(opt =>
          opt.setName("channel").setDescription("р╕Кр╣Ир╕нр╕Зр╕Чр╕╡р╣Ир╕Ир╕░р╕Ыр╕гр╕░р╕Бр╕▓р╕и").setRequired(true)
        )
        .addStringOption(opt =>
          opt.setName("message").setDescription("р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ыр╕гр╕░р╕Бр╕▓р╕и").setRequired(true)
        )
        .addStringOption(opt =>
          opt.setName("url").setDescription("р╕ер╕┤р╕Зр╕Бр╣Мр╕Яр╕нр╕гр╣Мр╕б (р╕Цр╣Йр╕▓р╣Др╕бр╣Ир╣Гр╕кр╣Ир╕Ир╕░р╣Гр╕Кр╣Йр╕Др╣Ир╕▓ default)")
        )
    ),
];

const rest = new REST({ version: "10" }).setToken(process.env.BOT_TOKEN);
(async () => {
  try {
    console.log("ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕З /set...");
    await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
    console.log("тЬЕ р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Бр╕ер╣Йр╕з!");
  } catch (err) {
    console.error(err);
  }
})();

// ЁЯОп р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╕Др╕│р╕кр╕▒р╣Ир╕З /set
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  const { commandName, options } = interaction;

  if (commandName === "set") {
    const sub = interaction.options.getSubcommand();

    if (sub === "private-channel") {
      const channel = options.getChannel("channel");
      config.privateChannel = channel.id;
      saveConfig();

      await interaction.reply({
        content: `тЬЕ р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Кр╣Ир╕нр╕Зр╕кр╕гр╕╕р╕Ыр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ыр╣Зр╕Щ ${channel}`,
        ephemeral: true,
      });
    }

    if (sub === "message") {
      const channel = options.getChannel("channel");
      const messageText = options.getString("message");
      const formUrl = options.getString("url") || DEFAULT_URL;

      const embed = new EmbedBuilder()
        .setTitle("ЁЯУЛ р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕Хр╕▒р╕зр╕ер╕░р╕Др╕г")
        .setDescription(messageText)
        .setColor("Gold");

      const button = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setLabel("ЁЯФЧ р╕Бр╕гр╕нр╕Бр╕Яр╕нр╕гр╣Мр╕бр╕Чр╕╡р╣Ир╕Щр╕╡р╣И")
          .setStyle(ButtonStyle.Link)
          .setURL(formUrl)
      );

      await channel.send({ embeds: [embed], components: [button] });
      await interaction.reply({
        content: `тЬЕ р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Ыр╕гр╕░р╕Бр╕▓р╕ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╕Чр╕╡р╣И ${channel}`,
        ephemeral: true,
      });
    }
  }
});

client.login(process.env.BOT_TOKEN);

// ЁЯМР API р╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Яр╕нр╕гр╣Мр╕б
app.post("/submit", async (req, res) => {
  try {
    const data = req.body;
    if (!config.privateChannel) return res.status(400).send("р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╕Кр╣Ир╕нр╕Зр╕кр╕гр╕╕р╕Ы!");

    const channel = await client.channels.fetch(config.privateChannel);
    if (!channel) return res.status(404).send("р╣Др╕бр╣Ир╕Юр╕Ър╕Кр╣Ир╕нр╕З!");

    const embed = new EmbedBuilder()
      .setTitle("ЁЯУЭ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╣Гр╕лр╕бр╣И")
      .setColor("Purple")
      .addFields(
        { name: "р╕Кр╕╖р╣Ир╕н OC", value: data.oc_name },
        { name: "р╕нр╕▓р╕вр╕╕ OC", value: data.oc_age },
        { name: "р╕Кр╕╖р╣Ир╕н IC", value: data.ic_name },
        { name: "р╕нр╕▓р╕вр╕╕ IC", value: data.ic_age },
        { name: "р╕кр╣Ир╕зр╕Щр╕кр╕╣р╕З IC", value: data.ic_height },
        { name: "р╕кр╕▓р╕вр╕Юр╕▒р╕Щр╕Шр╕╕р╣М", value: data.species },
        { name: "Discord", value: data.discord_user },
        { name: "р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤ IC", value: data.ic_history }
      )
      .setTimestamp();

    await channel.send({ embeds: [embed] });
    res.send({ status: "ok" });
  } catch (err) {
    console.error(err);
    res.status(500).send({ status: "error" });
  }
});

app.listen(3000, () => console.log("ЁЯМР Web API р╕гр╕▒р╕Щр╕Чр╕╡р╣Ир╕Юр╕нр╕гр╣Мр╕Х 3000"));
