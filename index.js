import dotenv from "dotenv";
dotenv.config();

import fs from "fs";
import path from "path";
import {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  EmbedBuilder,
} from "discord.js";
import express from "express";
import cors from "cors";

const app = express();
app.use(express.json());

// üß© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Local ‡∏´‡∏£‡∏∑‡∏≠ Cloud
const isLocal = !process.env.KOYEB_APP_ID && !process.env.RENDER;

// üìÅ ‡∏≠‡πà‡∏≤‡∏ô .gitignore ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô Local
let ignoredFiles = [];
if (isLocal) {
  const gitignorePath = path.join(process.cwd(), ".gitignore");
  if (fs.existsSync(gitignorePath)) {
    ignoredFiles = fs
      .readFileSync(gitignorePath, "utf8")
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line && !line.startsWith("#"));
    console.log("üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ .gitignore ‡πÅ‡∏•‡πâ‡∏ß:", ignoredFiles);
  }
}

// ‚úÖ CORS
const allowedOrigins = [
  "https://roleplayfrom.vercel.app",
  "https://www.roleplayfrom.vercel.app",
];
if (isLocal) allowedOrigins.push("http://localhost:10000", "http://127.0.0.1:10000");

app.use(
  cors({
    origin: (origin, callback) => {
      if (!origin || allowedOrigins.includes(origin)) callback(null, true);
      else callback(new Error("‚ùå Origin ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"));
    },
    methods: ["POST", "GET"],
  })
);

// üß† Discord Client
const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers],
});

// üì¶ Config
const CONFIG_FILE = "./config.json";
let config = {};
if (!ignoredFiles.includes("config.json")) {
  config = fs.existsSync(CONFIG_FILE) ? JSON.parse(fs.readFileSync(CONFIG_FILE, "utf8")) : {};
} else {
  console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå config.json (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô .gitignore)");
}

function saveConfig() {
  if (!ignoredFiles.includes("config.json")) {
    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
  }
}

// üü¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
client.once("ready", () => {
  console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${client.user.tag}`);
});

// üîë Login
client
  .login(process.env.BOT_TOKEN)
  .then(() => console.log("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"))
  .catch((err) => console.error("‚ùå Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err));

// üß© ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash
const commands = [
  new SlashCommandBuilder()
    .setName("setchannel")
    .setDescription("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°")
    .addChannelOption((opt) =>
      opt.setName("channel").setDescription("‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ").setRequired(true)
    ),

  new SlashCommandBuilder()
    .setName("setannounce")
    .setDescription("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
    .addChannelOption((opt) =>
      opt.setName("channel").setDescription("‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®").setRequired(true)
    )
    .addStringOption((opt) =>
      opt.setName("message").setDescription("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®").setRequired(true)
    )
    .addStringOption((opt) =>
      opt.setName("image").setDescription("‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ/GIF")
    )
    .addStringOption((opt) =>
      opt.setName("color").setDescription("‡∏™‡∏µ embed ‡πÄ‡∏ä‡πà‡∏ô #FFD700")
    ),

  new SlashCommandBuilder()
    .setName("setsummary")
    .setDescription("‡∏ï‡∏±‡πâ‡∏á template ‡∏™‡∏£‡∏∏‡∏õ ‡πÄ‡∏ä‡πà‡∏ô {OC},{IC},{A},{IC_A},{HCM},{SPC},{DC},{STR}")
    .addStringOption((opt) =>
      opt
        .setName("message")
        .setDescription("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ: ‡πÉ‡∏ä‡πâ {OC},{IC},{A},{IC_A},{HCM},{SPC},{DC},{STR}")
        .setRequired(true)
    ),

  new SlashCommandBuilder()
    .setName("setrole")
    .setDescription("‡∏ï‡∏±‡πâ‡∏á role ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°")
    .addRoleOption((opt) =>
      opt.setName("role").setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å role").setRequired(true)
    ),

  new SlashCommandBuilder().setName("preview").setDescription("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ"),

  new SlashCommandBuilder().setName("clearsetting").setDescription("‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü"),
].map((cmd) => cmd.toJSON());

// üîÅ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
const rest = new REST({ version: "10" }).setToken(process.env.BOT_TOKEN);
(async () => {
  try {
    console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...");
    await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
    console.log("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
  } catch (err) {
    console.error("‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
  }
})();

// üìå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Slash Command
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  const { commandName, options, guildId } = interaction;

  if (!config[guildId])
    config[guildId] = {
      summaryChannel: null,
      announceChannel: null,
      announceMessage: null,
      summaryMessage: null,
      roleToGive: null,
      embedImage: null,
      embedColor: "#FFD700",
    };

  try {
    if (commandName === "setchannel") {
      const channel = options.getChannel("channel");
      config[guildId].summaryChannel = channel.id;
      saveConfig();
      return interaction.reply({ content: `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô <#${channel.id}>`, ephemeral: true });
    }

    if (commandName === "setannounce") {
      const channel = options.getChannel("channel");
      config[guildId].announceChannel = channel.id;
      config[guildId].announceMessage = options.getString("message");
      config[guildId].embedImage = options.getString("image");
      config[guildId].embedColor = options.getString("color") || "#FFD700";
      saveConfig();

      const embed = new EmbedBuilder()
        .setTitle("üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏≠‡∏£‡πå‡∏°")
        .setDescription(config[guildId].announceMessage)
        .setColor(config[guildId].embedColor);
      if (config[guildId].embedImage) embed.setImage(config[guildId].embedImage);

      const announceChannel = await client.channels.fetch(config[guildId].announceChannel).catch(() => null);
      if (announceChannel) await announceChannel.send({ embeds: [embed] });

      return interaction.reply({ content: `‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô <#${channel.id}> ‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
    }

    if (commandName === "setsummary") {
      const msg = options.getString("message");
      if (msg.length > 100) return interaction.reply({ content: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£!", ephemeral: true });
      config[guildId].summaryMessage = msg;
      saveConfig();
      return interaction.reply({ content: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", ephemeral: true });
    }

    if (commandName === "setrole") {
      const role = options.getRole("role");
      config[guildId].roleToGive = role.id;
      saveConfig();
      return interaction.reply({ content: `‚úÖ ‡∏ï‡∏±‡πâ‡∏á role ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô: ${role.name}`, ephemeral: true });
    }

    if (commandName === "preview") {
      const g = config[guildId];
      const dummy = { OC: "Luna", IC: "Shiki", A: "17", IC_A: "25", HCM: "175cm", SPC: "Furry Fox", DC: "Shiki#1234", STR: "‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢" };

      const announceEmbed = new EmbedBuilder()
        .setTitle("üì¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")
        .setDescription(g.announceMessage || "‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£")
        .setColor(g.embedColor);
      if (g.embedImage) announceEmbed.setImage(g.embedImage);
      await interaction.reply({ embeds: [announceEmbed], ephemeral: true });

      if (g.summaryMessage) {
        const summaryEmbed = new EmbedBuilder().setTitle("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ").setColor(g.embedColor);
        const fields = g.summaryMessage.match(/\{(.*?)\}/g);
        fields?.forEach((f) => {
          const key = f.replace(/[{}]/g, "");
          summaryEmbed.addFields({ name: key, value: dummy[key.toUpperCase()] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", inline: true });
        });
        await interaction.followUp({ embeds: [summaryEmbed], ephemeral: true });
      }
    }

    if (commandName === "clearsetting") {
      config[guildId] = { summaryChannel: null, announceChannel: null, announceMessage: null, summaryMessage: null, roleToGive: null, embedImage: null, embedColor: "#FFD700" };
      saveConfig();
      return interaction.reply({ content: "üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", ephemeral: true });
    }
  } catch (err) {
    console.error(err);
    interaction.reply({ content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!", ephemeral: true });
  }
});

// üì® ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
app.post("/submit", async (req, res) => {
  try {
    const data = req.body;
    const targetGuildId = data.guild_id;
    if (!targetGuildId || !config[targetGuildId]) return res.status(400).send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");

    const guildConfig = config[targetGuildId];
    const channel = await client.channels.fetch(guildConfig.summaryChannel).catch(() => null);
    if (!channel) return res.status(404).send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ");

    const embed = new EmbedBuilder().setTitle("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà").setColor(guildConfig.embedColor);
    const fields = guildConfig.summaryMessage?.match(/\{(.*?)\}/g);
    fields?.forEach((f) => {
      const key = f.replace(/[{}]/g, "");
      embed.addFields({ name: key, value: data[key.toLowerCase()] || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", inline: true });
    });
    if (guildConfig.embedImage) embed.setImage(guildConfig.embedImage);

    await channel.send({ embeds: [embed] });

    // üéñÔ∏è ‡∏°‡∏≠‡∏ö Role
    if (guildConfig.roleToGive && data.discord_id) {
      const guild = await client.guilds.fetch(targetGuildId);
      const member = await guild.members.fetch(data.discord_id).catch(() => null);
      if (member) {
        const role = guild.roles.cache.get(guildConfig.roleToGive);
        if (role && !member.roles.cache.has(role.id)) await member.roles.add(role);
      }
    }

    res.send({ status: "ok" });
  } catch (err) {
    console.error(err);
    res.status(500).send({ status: "error", error: err.message });
  }
});

// üåê ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üåê Web API ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT} | ‡πÇ‡∏´‡∏°‡∏î: ${isLocal ? "Local" : "Cloud"}`));
